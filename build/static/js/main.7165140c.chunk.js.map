{"version":3,"sources":["Components/InputBox.js","Components/TextArea.js","Components/Avatar.js","ProfileInfo/index.js","utils/validateProfileForm.js","utils/data.js","Components/Select.js","utils/validatePersonalInfoForm.js","PersonalInfo/index.js","utils/validateQualificationForm.js","Qualification/index.js","Components/Steps.js","App.js","index.js"],"names":["InputBox","name","value","errorMessage","handleInput","label","placeholder","type","Field","control","Input","onChange","error","content","TextArea","TextareaAutosize","Avatar","previewAvatar","avatar","className","htmlFor","src","alt","ProfileInfo","props","target","setState","removeErrorMessage","handleImage","file","avatarRef","current","files","reader","FileReader","readAsDataURL","onloadend","result","avatarImageType","state","usernameValidationFailedMessage","bioValidationFailedMessage","emailValidationFailedMessage","avatarValidationFailedMessage","contactNumberValidationFailedMessage","validateForm","username","email","bio","contactNumber","trim","hasNumber","split","some","char","isNaN","length","toLowerCase","isUsernameValid","isBioValid","isValid","endsWith","includes","isEmailValid","imageType","isJPEG","isAvatarValid","startingDigit","slice","isContactNumberValid","handleSubmit","event","a","persist","updateInfo","nextStep","completedStep","React","createRef","this","id","ref","Message","negative","Button","animated","onClick","Content","visible","hidden","Icon","Component","countryOptions","key","text","Select","options","map","option","isNameValid","fieldName","hasNonCharValue","index","asciiValue","charCodeAt","isNonEmpty","console","log","firstName","lastName","city","district","zipcode","address","country","firstNameValidationFailedMessage","lastNameValidationFailedMessage","cityNameValidationFailedMessage","stateNameValidationFailedMessage","districtNameValidationFailedMessage","zipcodeValidationFailedMessage","hasNonNumericValue","digit","isZipcodeValid","addressValidationFailedMessage","countryValidationFailedMessage","prevStep","Group","widths","school","college","postGraduate","schoolNameValidationFailedMessage","collegeNameValidationFailedMessage","postGraduateValidationFailedMessage","Steps","currentStep","jumpToStep","Step","active","disabled","Title","App","updatedValueObj","userResponse","window","confirm","stepNo","Form","Segment","ReactDOM","render","Fragment","document","getElementById"],"mappings":"kUAgCeA,MA7Bf,YAQI,IAPFC,EAOC,EAPDA,KACAC,EAMC,EANDA,MACAC,EAKC,EALDA,aACAC,EAIC,EAJDA,YACAC,EAGC,EAHDA,MACAC,EAEC,EAFDA,YACAC,EACC,EADDA,KAEA,OACE,kBAAC,IAAKC,MAAN,CACED,KAAMA,GAAQ,OACdE,QAASC,IACTL,MAAOA,EACPC,YAAaA,GAAeD,EAC5BJ,KAAMA,EACNC,MAAOA,GAAS,GAChBS,SAAUP,EACVQ,QACET,GACI,CACEU,QAASV,M,SCORW,MA3Bf,YAOI,IANFb,EAMC,EANDA,KACAC,EAKC,EALDA,MACAC,EAIC,EAJDA,aACAC,EAGC,EAHDA,YACAC,EAEC,EAFDA,MACAC,EACC,EADDA,YAEA,OACE,kBAAC,IAAKE,MAAN,CACEC,QAASM,IACTV,MAAOA,EACPC,YAAaA,GAAeD,EAC5BJ,KAAMA,EACNC,MAAOA,GAAS,GAChBS,SAAUP,EACVQ,QACET,GACI,CACEU,QAASV,MCARa,MArBf,YAA0C,IAAzBC,EAAwB,EAAxBA,cAAeC,EAAS,EAATA,OAC5B,OACI,yBAAKC,UAAU,UACX,2BAAOC,QAAQ,iBACb,yBACEC,IACEJ,GACAC,GACA,4DAEFI,IAAI,WAEN,yBAAKH,UAAU,eACb,uBAAGA,UAAU,kBACb,yCCHKI,E,kDACnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAyCRpB,YAAc,YAAkC,IAAD,IAA9BqB,OAAUxB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAE/B,OADA,EAAKwB,SAAL,eAAiBzB,EAAOC,IACjB,EAAKyB,mBAAmB1B,IA5Cd,EA+CnB2B,YAAc,WACZ,IAAIC,EAAO,EAAKC,UAAUC,QAAQC,MAAM,GACpCC,EAAS,IAAIC,WAWjB,OAVAD,EAAOE,cAAcN,GAErB,EAAKF,mBAAmB,UACxBM,EAAOG,UAAY,WACjB,EAAKV,SAAS,CACZT,cAAe,CAACgB,EAAOI,QACvBC,gBAAiB,EAAKR,UAAUC,QAAQC,MAAM,GAAGzB,KACjDW,OAAQW,EAAK5B,QAGV,EAAK0B,mBAAmB,WA5Dd,EA+DnBA,mBAAqB,SAAC1B,GAAU,IAAD,EAOzB,EAAKsC,MALPC,EAF2B,EAE3BA,gCACAC,EAH2B,EAG3BA,2BACAC,EAJ2B,EAI3BA,6BACAC,EAL2B,EAK3BA,8BACAC,EAN2B,EAM3BA,qCAGF,OAAQ3C,GACN,IAAK,QACH,OACEyC,GACA,EAAKhB,SAAS,CAAEgB,6BAA8B,KAGlD,IAAK,MACH,OACED,GACA,EAAKf,SAAS,CAAEe,2BAA4B,KAEhD,IAAK,WACH,OACED,GACA,EAAKd,SAAS,CAAEc,gCAAiC,KAErD,IAAK,SACH,OACEG,GACA,EAAKjB,SAAS,CAAEiB,8BAA+B,KAEnD,IAAK,gBACH,OACEC,GACA,EAAKlB,SAAS,CAAEkB,qCAAsC,KAE1D,QACE,SApGa,EAwGnBC,aAAe,YAOR,IANLC,EAMI,EANJA,SACAC,EAKI,EALJA,MACAC,EAII,EAJJA,IACAC,EAGI,EAHJA,cACA/B,EAEI,EAFJA,OACAoB,EACI,EADJA,gBAEIE,EC9HD,WAAyC,IAAhBM,EAAe,uDAAJ,GAEzC,KADAA,EAAWA,EAASI,QAElB,MAAO,wBAET,IAAIC,EAAYL,EAASM,MAAM,IAAIC,MAAK,SAACC,GAAD,OAAWC,OAAOD,MAC1D,OAAIR,EAASU,OAAS,EACb,6CACEV,IAAaA,EAASW,cACxB,gCACEN,EACF,wCAEA,GDiH+BO,CAAgBZ,GAClDL,EC9GD,WAA+B,IAAXO,EAAU,uDAAJ,GAE/B,OADAA,EAAMA,EAAIE,QAEHF,EAAIQ,OAAS,IAAM,kCAAoC,GAD7C,mBD4GkBG,CAAWX,GACxCN,EClGD,WAAmC,IAAbK,EAAY,uDAAJ,GAEnC,KADAA,EAAQA,EAAMG,QACH,MAAO,qBAClB,IAAIU,EACFb,EAAMS,QAAUT,EAAMc,SAAS,SAAWd,EAAMe,SAAS,KAC3D,OAAQF,EAA4B,GAAlB,gBD6FmBG,CAAahB,GAC5CJ,EC1GD,WAAgD,IAAzBzB,EAAwB,uDAAf,GAAI8C,EAAW,uCAEpD,KADA9C,EAASA,EAAOgC,QACH,MAAO,+BACpB,IAAIe,EAASD,EAAUP,cAAcK,SAAS,QAC9C,OAAQG,EAA8C,GAArC,mCDsGqBC,CAAchD,EAAQoB,GACtDM,EC5FD,WAAmD,IAArBK,EAAoB,uDAAJ,GAEnD,KADAA,EAAgBA,EAAcC,QACX,MAAO,8BAE1B,IAAIiB,EAAgBlB,EAAcC,OAAOkB,MAAM,EAAG,GAClD,OAAID,EAAgB,GAAKA,EAAgB,EAChC,yBAEF,GDoFsCE,CACzCpB,GAEF,EAAKvB,SAAS,CACZc,kCACAC,6BACAC,+BACAC,gCACAC,0CA5He,EAgInB0B,aAhImB,uCAgIJ,WAAOC,GAAP,mCAAAC,EAAA,6DACbD,EAAME,UADO,EAEkB,EAAKjD,MAA9BkD,EAFO,EAEPA,WAAYC,EAFL,EAEKA,SAFL,EAWT,EAAKpC,MAPPrB,EAJW,EAIXA,OACAD,EALW,EAKXA,cACA6B,EANW,EAMXA,SACAE,EAPW,EAOXA,IACAD,EARW,EAQXA,MACAE,EATW,EASXA,cACAX,EAVW,EAUXA,gBAVW,SAYP,EAAKO,aAAa,EAAKN,OAZhB,YAcX,EAAKA,MAAMC,iCACX,EAAKD,MAAME,4BACX,EAAKF,MAAMG,8BACX,EAAKH,MAAMI,+BACX,EAAKJ,MAAMK,sCAlBA,iDAsBb8B,EAAW,CACTxD,SACAD,gBACA6B,WACAE,MACAD,QACAE,gBACAX,kBACAsC,cAAe,IAEjBD,IAhCa,2CAhII,sDAEjB,EAAKpC,MAAQ,CACXO,SAAU,GACVE,IAAK,GACLD,MAAO,GACPE,cAAe,GACf/B,OAAQ,GACRD,cAAe,GACfqB,gBAAiB,GAEjBE,gCAAiC,GACjCC,2BAA4B,GAC5BC,6BAA8B,GAC9BC,8BAA+B,GAC/BC,qCAAsC,IAExC,EAAKd,UAAY+C,IAAMC,YAjBN,E,gEAoBE,IAAD,EASdC,KAAKvD,MAPPN,EAFgB,EAEhBA,OACAD,EAHgB,EAGhBA,cACA6B,EAJgB,EAIhBA,SACAE,EALgB,EAKhBA,IACAD,EANgB,EAMhBA,MACAE,EAPgB,EAOhBA,cACAX,EARgB,EAQhBA,gBAGFyC,KAAKrD,SAAS,CACZR,SACAD,gBACA6B,WACAE,MACAD,QACAE,gBACAX,sB,+BA6HM,IAAD,EAaHyC,KAAKxC,MAXPrB,EAFK,EAELA,OACAD,EAHK,EAGLA,cACA6B,EAJK,EAILA,SACAE,EALK,EAKLA,IACAD,EANK,EAMLA,MACAE,EAPK,EAOLA,cACAT,EARK,EAQLA,gCACAC,EATK,EASLA,2BACAC,EAVK,EAULA,6BACAC,EAXK,EAWLA,8BACAC,EAZK,EAYLA,qCAEF,OACE,yBAAKzB,UAAU,QACb,kBAAC,IAAD,KACE,2BACEZ,KAAK,OACLyE,GAAG,gBACHC,IAAKF,KAAKjD,UACVnB,SAAUoE,KAAKnD,YACf3B,KAAK,WAGP,kBAAC,EAAD,CAAQgB,cAAeA,EAAeC,OAAQA,IAC9C,6BACGyB,GACC,kBAACuC,EAAA,EAAD,CAASC,UAAQ,GACf,2BAAIxC,KAKV,kBAAC,EAAD,CACE1C,KAAM,WACNI,MAAO,WACPH,MAAO4C,EACP1C,YAAa2E,KAAK3E,YAClBD,aAAcqC,IAGhB,kBAAC,EAAD,CACEvC,KAAM,MACNI,MAAO,MACPH,MAAO8C,EACP5C,YAAa2E,KAAK3E,YAClBD,aAAcsC,IAGhB,kBAAC,EAAD,CACExC,KAAM,QACNI,MAAO,QACPH,MAAO6C,EACP3C,YAAa2E,KAAK3E,YAClBD,aAAcuC,IAGhB,kBAAC,EAAD,CACEzC,KAAM,gBACNI,MAAO,iBACPH,MAAO+C,EACP7C,YAAa2E,KAAK3E,YAClBD,aAAcyC,IAGhB,yBAAKzB,UAAU,eACb,kBAACiE,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAASP,KAAKT,cAC7B,kBAACc,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,QACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GACpB,kBAACC,EAAA,EAAD,CAAMzF,KAAK,yB,GA1Oc0F,aEb5BC,EAAiB,CAC5B,CAAEC,IAAK,KAAM3F,MAAO,QAAS4F,KAAM,SACnC,CAAED,IAAK,KAAM3F,MAAO,cAAe4F,KAAM,eACzC,CAAED,IAAK,KAAM3F,MAAO,gBAAiB4F,KAAM,iBAC3C,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,iBAAkB4F,KAAM,kBAC5C,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,SAAU4F,KAAM,UACpC,CAAED,IAAK,KAAM3F,MAAO,WAAY4F,KAAM,YACtC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,YAAa4F,KAAM,aACvC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,QAAS4F,KAAM,SACnC,CAAED,IAAK,KAAM3F,MAAO,YAAa4F,KAAM,aACvC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,aAAc4F,KAAM,cACxC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,aAAc4F,KAAM,cACxC,CAAED,IAAK,KAAM3F,MAAO,WAAY4F,KAAM,YACtC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,UAAW4F,KAAM,WACrC,CAAED,IAAK,KAAM3F,MAAO,SAAU4F,KAAM,UACpC,CAAED,IAAK,KAAM3F,MAAO,QAAS4F,KAAM,UCQtBC,MA7Bf,YAA2E,IAA1D7F,EAAyD,EAAzDA,MAAOC,EAAkD,EAAlDA,aAAc6F,EAAoC,EAApCA,QAAS/F,EAA2B,EAA3BA,KAAMI,EAAqB,EAArBA,MAAOD,EAAc,EAAdA,YAE1D,OACE,kBAAC,IAAKI,MAAN,CACEH,MAAOA,EACPJ,KAAMA,GAAQ,GACdC,MAAOA,GAAS,GAChBO,QAAS,SACTE,SAAUP,EACVQ,QACET,GACI,CAAEU,QAASV,IAIjB,4BAAQ0F,IAAI,OAAO3F,MAAM,IAAzB,kBAGC8F,EAAQC,KAAI,SAACC,GACZ,OACE,4BAAQL,IAAKK,EAAOL,IAAK3F,MAAOgG,EAAOhG,OACpCgG,EAAOJ,WCvBb,SAASK,IAAwC,IAA5BlG,EAA2B,uDAApB,GAAImG,EAAgB,uDAAJ,GAEjD,KADAnG,EAAOA,EAAKiD,QAEV,MAAM,GAAN,OAAUkD,EAAUlD,OAApB,iBAGF,IAAImD,EAAkBpG,EAAKmD,MAAM,IAAIC,MAAK,SAACC,EAAMgD,GAC/C,IAAIC,EAAatG,EAAKwD,cAAc+C,WAAWF,GAC/C,OAAIC,EAAa,IAAMA,EAAa,MAAQhD,OAAOD,MAKrD,OAAI+C,EACK,8BAEF,GAkBF,SAASI,IAAoC,IAAzBvG,EAAwB,uDAAlB,GAAIkG,EAAc,uDAAJ,GAE3C,OADAlG,EAAQA,EAAMgD,QAIP,GAFG,GAAN,OAAUkD,EAAUlD,OAApB,iB,ICzBaoD,E,kDACnB,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IA4CRpB,YAAc,YAAkC,IAAD,IAA9BqB,OAAUxB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAG/B,OAFAwG,QAAQC,IAAI,CAAE1G,OAAMC,UACpB,EAAKwB,SAAL,eAAiBzB,EAAOC,IACjB,EAAKyB,mBAAmB1B,IAhDd,EAmDnB4C,aAAe,YASR,IARL+D,EAQI,EARJA,UACAC,EAOI,EAPJA,SACAC,EAMI,EANJA,KACAvE,EAKI,EALJA,MACAwE,EAII,EAJJA,SACAC,EAGI,EAHJA,QACAC,EAEI,EAFJA,QACAC,EACI,EADJA,QAEIC,EAAmChB,EAAYS,EAAW,cAC1DQ,EAAkCjB,EAAYU,EAAU,aACxDQ,EAAkCZ,EAAWK,EAAM,aACnDQ,EAAmCb,EAAWlE,EAAO,cACrDgF,EAAsCd,EACxCM,EACA,iBAEES,ED/DD,WAAuC,IAAfR,EAAc,uDAAJ,GAEvC,KADAA,EAAUA,EAAQ9D,QACL,MAAO,uBACpB,GAAuB,IAAnB8D,EAAQxD,OACV,MAAO,oCAGT,IAAIiE,EAAqBT,EAAQ5D,MAAM,IAAIC,MAAK,SAACqE,GAAD,OAAWnE,OAAOmE,MAElE,OAAID,EACK,uCAEF,GCmDgCE,CAAeX,GAChDY,EAAiCnB,EAAWQ,EAAS,WACrDY,EAAiCpB,EAAWS,EAAS,gBAEzD,EAAKxF,SAAS,CACZyF,mCACAC,kCACAC,kCACAC,mCACAC,sCACAC,iCACAI,iCACAC,oCAjFe,EAqFnBvD,aArFmB,uCAqFJ,WAAOC,GAAP,qCAAAC,EAAA,6DACbD,EAAME,UADO,EAEkB,EAAKjD,MAA9BkD,EAFO,EAEPA,WAAYC,EAFL,EAEKA,SAFL,EAYT,EAAKpC,MARPqE,EAJW,EAIXA,UACAC,EALW,EAKXA,SACAC,EANW,EAMXA,KACAvE,EAPW,EAOXA,MACAwE,EARW,EAQXA,SACAC,EATW,EASXA,QACAC,EAVW,EAUXA,QACAC,EAXW,EAWXA,QAXW,SAaP,EAAKrE,aAAa,EAAKN,OAbhB,YAeX,EAAKA,MAAM4E,kCACX,EAAK5E,MAAM6E,iCACX,EAAK7E,MAAM8E,iCACX,EAAK9E,MAAM+E,kCACX,EAAK/E,MAAMgF,qCACX,EAAKhF,MAAMiF,gCACX,EAAKjF,MAAMqF,gCACX,EAAKrF,MAAMsF,gCAtBA,iDA0BbnD,EAAW,CACTkC,YACAC,WACAC,OACAvE,QACAwE,WACAC,UACAC,UACAC,UACAtC,cAAe,IAEjBD,IArCa,2CArFI,wDA6HnBhD,mBAAqB,SAAC1B,GAAU,IAAD,EAUzB,EAAKsC,MARP4E,EAF2B,EAE3BA,iCACAC,EAH2B,EAG3BA,gCACAC,EAJ2B,EAI3BA,gCACAC,EAL2B,EAK3BA,iCACAC,EAN2B,EAM3BA,oCACAC,EAP2B,EAO3BA,+BACAI,EAR2B,EAQ3BA,+BACAC,EAT2B,EAS3BA,+BAGF,OAAQ5H,GACN,IAAK,YACH,OACEkH,GACA,EAAKzF,SAAS,CAAEyF,iCAAkC,KAGtD,IAAK,WACH,OACEC,GACA,EAAK1F,SAAS,CAAE0F,gCAAiC,KAErD,IAAK,OACH,OACEC,GACA,EAAK3F,SAAS,CAAE2F,gCAAiC,KAErD,IAAK,QACH,OACEC,GACA,EAAK5F,SAAS,CAAE4F,iCAAkC,KAEtD,IAAK,WACH,OACEC,GACA,EAAK7F,SAAS,CAAE6F,oCAAqC,KAEzD,IAAK,UACH,OACEC,GACA,EAAK9F,SAAS,CAAE8F,+BAAgC,KAEpD,IAAK,UACH,OACEI,GACA,EAAKlG,SAAS,CAAEkG,+BAAgC,KAGpD,IAAK,UACH,OACEC,GACA,EAAKnG,SAAS,CAAEmG,+BAAgC,KAGpD,QACE,SApLJ,EAAKtF,MAAQ,CACXqE,UAAW,GACXC,SAAU,GACVC,KAAM,GACNvE,MAAO,GACPwE,SAAU,GACVC,QAAS,GACTC,QAAS,GACTC,QAAS,GACTC,iCAAkC,GAClCC,gCAAiC,GACjCC,gCAAiC,GACjCC,iCAAkC,GAClCC,oCAAqC,GACrCC,+BAAgC,GAChCI,+BAAgC,IAjBjB,E,gEAqBE,IAAD,EAUd7C,KAAKvD,MARPoF,EAFgB,EAEhBA,UACAC,EAHgB,EAGhBA,SACAC,EAJgB,EAIhBA,KACAvE,EALgB,EAKhBA,MACAwE,EANgB,EAMhBA,SACAC,EAPgB,EAOhBA,QACAC,EARgB,EAQhBA,QACAC,EATgB,EAShBA,QAGFnC,KAAKrD,SAAS,CACZkF,YACAC,WACAC,OACAvE,QACAwE,WACAC,UACAC,UACAC,c,+BAiJM,IACFY,EAAa/C,KAAKvD,MAAlBsG,SADC,EAmBH/C,KAAKxC,MAhBPqE,EAHK,EAGLA,UACAC,EAJK,EAILA,SACAC,EALK,EAKLA,KACAvE,EANK,EAMLA,MACAwE,EAPK,EAOLA,SACAC,EARK,EAQLA,QACAC,EATK,EASLA,QACAC,EAVK,EAULA,QACAC,EAXK,EAWLA,iCACAC,EAZK,EAYLA,gCACAC,EAbK,EAaLA,gCACAC,EAdK,EAcLA,iCACAC,EAfK,EAeLA,oCACAC,EAhBK,EAgBLA,+BACAI,EAjBK,EAiBLA,+BACAC,EAlBK,EAkBLA,+BAEF,OACE,kBAAC,IAAD,KACE,kBAAC,IAAKE,MAAN,CAAYC,OAAO,SACjB,kBAAC,EAAD,CACE/H,KAAM,YACNI,MAAO,aACPH,MAAO0G,EACPxG,YAAa2E,KAAK3E,YAClBD,aAAcgH,IAEhB,kBAAC,EAAD,CACElH,KAAM,WACNI,MAAO,YACPH,MAAO2G,EACPzG,YAAa2E,KAAK3E,YAClBD,aAAciH,KAGlB,kBAAC,EAAD,CACEnH,KAAM,OACNI,MAAO,OACPH,MAAO4G,EACP1G,YAAa2E,KAAK3E,YAClBD,aAAckH,IAEhB,kBAAC,EAAD,CACEpH,KAAM,WACNI,MAAO,WACPH,MAAO6G,EACP3G,YAAa2E,KAAK3E,YAClBD,aAAcoH,IAEhB,kBAAC,EAAD,CACEtH,KAAM,QACNI,MAAO,QACPH,MAAOqC,EACPnC,YAAa2E,KAAK3E,YAClBD,aAAcmH,IAEhB,kBAAC,EAAD,CACErH,KAAM,UACNI,MAAM,UACNH,MAAO8G,EACP5G,YAAa2E,KAAK3E,YAClBD,aAAcqH,IAGhB,kBAAC,EAAD,CACEnH,MAAM,UACNJ,KAAK,UACLC,MAAOgH,EACP/G,aAAc0H,EACdzH,YAAa2E,KAAK3E,YAClB4F,QAASJ,IAGX,kBAAC,EAAD,CACE3F,KAAM,UACNI,MAAO,UACPH,MAAO+G,EACP7G,YAAa2E,KAAK3E,YAClBD,aAAcyH,IAEhB,yBAAKzG,UAAU,eACb,kBAACiE,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAASwC,GACxB,kBAAC1C,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,QACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GACpB,kBAACC,EAAA,EAAD,CAAMzF,KAAK,iBAGf,kBAACmF,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAASP,KAAKT,cAC7B,kBAACc,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,QACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GACpB,kBAACC,EAAA,EAAD,CAAMzF,KAAK,wB,GAxRU0F,aCb5B,SAASc,IAAoC,IAAzBvG,EAAwB,uDAAlB,GAAIkG,EAAc,uDAAJ,GAE3C,OADAlG,EAAQA,EAAMgD,QAIP,GAFG,GAAN,OAAUkD,EAAUlD,OAApB,iB,ICCaoD,E,kDACnB,WAAY9E,GAAQ,IAAD,8BACjB,cAAMA,IAiBRpB,YAAc,YAAkC,IAAD,IAA9BqB,OAAUxB,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MAC/B,OAAO,EAAKwB,SAAL,eAAiBzB,EAAOC,KAnBd,EAsBnB2C,aAAe,YAAwC,IAArCoF,EAAoC,EAApCA,OAAQC,EAA4B,EAA5BA,QAASC,EAAmB,EAAnBA,aAC7BC,EAAoC3B,EAAWwB,EAAQ,eACvDI,EAAqC5B,EACvCyB,EACA,gBAEEI,EAAsC7B,EACxC0B,EACA,mBAGF,OAAO,EAAKzG,SAAS,CACnB0G,oCACAC,qCACAC,yCApCe,EAwCnBhE,aAxCmB,uCAwCJ,WAAOC,GAAP,uBAAAC,EAAA,6DACbD,EAAME,UACAC,EAAe,EAAKlD,MAApBkD,WAFO,EAG2B,EAAKnC,MAAvC0F,EAHO,EAGPA,OAAQC,EAHD,EAGCA,QAASC,EAHV,EAGUA,aAHV,SAIP,EAAKtF,aAAa,EAAKN,OAJhB,YAMX,EAAKA,MAAM6F,mCACX,EAAK7F,MAAM8F,oCACX,EAAK9F,MAAM+F,qCARA,iDAab5D,EAAW,CACTuD,SACAC,UACAC,eACAvD,cAAc,IAjBH,2CAxCI,sDAEjB,EAAKrC,MAAQ,CACX0F,OAAQ,GACRC,QAAS,GACTC,aAAc,GAEdC,kCAAmC,GACnCC,mCAAoC,GACpCC,oCAAqC,IATtB,E,gEAaE,IAAD,EACsBvD,KAAKvD,MAAvCyG,EADY,EACZA,OAAQC,EADI,EACJA,QAASC,EADL,EACKA,aACvB,OAAOpD,KAAKrD,SAAS,CAAEuG,SAAQC,UAASC,mB,+BA8ChC,IACFL,EAAa/C,KAAKvD,MAAlBsG,SADC,EASH/C,KAAKxC,MANP0F,EAHK,EAGLA,OACAC,EAJK,EAILA,QACAC,EALK,EAKLA,aACAC,EANK,EAMLA,kCACAC,EAPK,EAOLA,mCACAC,EARK,EAQLA,oCAEF,OACE,6BACE,kBAAC,IAAD,KACE,kBAAC,IAAK9H,MAAN,CACEF,YAAY,SACZG,QAASC,IACTL,MAAM,SACNJ,KAAK,SACLC,MAAO+H,EACPtH,SAAUoE,KAAK3E,YACfQ,QACEwH,GACI,CAAEvH,QAASuH,KAKnB,kBAAC,IAAK5H,MAAN,CACEC,QAASC,IACTL,MAAM,UACNC,YAAY,UACZL,KAAK,UACLC,MAAOgI,EACPvH,SAAUoE,KAAK3E,YACfQ,QACEyH,GACI,CAAExH,QAASwH,KAKnB,kBAAC,IAAK7H,MAAN,CACEC,QAASC,IACTL,MAAM,gBACNC,YAAY,gBACZL,KAAK,eACLC,MAAOiI,EACPxH,SAAUoE,KAAK3E,YACfQ,QACE0H,GACI,CAAEzH,QAASyH,KAInB,yBAAKnH,UAAU,eACf,kBAACiE,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAASwC,GACxB,kBAAC1C,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,QACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GACpB,kBAACC,EAAA,EAAD,CAAMzF,KAAK,iBAGf,kBAACmF,EAAA,EAAD,CAAQC,UAAQ,EAACC,QAASP,KAAKT,cAC7B,kBAACc,EAAA,EAAOG,QAAR,CAAgBC,SAAO,GAAvB,QACA,kBAACJ,EAAA,EAAOG,QAAR,CAAgBE,QAAM,GACpB,kBAACC,EAAA,EAAD,CAAMzF,KAAK,yB,GA9HU0F,a,SCDd4C,E,uKACT,IAAD,EAC0CxD,KAAKvD,MAAhDgH,EADC,EACDA,YAAa5D,EADZ,EACYA,cAAe6D,EAD3B,EAC2BA,WAClC,OACE,yBAAKtH,UAAU,iBACb,kBAACuH,EAAA,EAAKX,MAAN,CAAYC,OAAQ,GAClB,kBAACU,EAAA,EAAD,CACEC,OAAwB,IAAhBH,EACRI,UAAU,EACVtD,QAAS,kBAAMmD,EAAW,KAE1B,kBAAC/C,EAAA,EAAD,CAAMzF,KAAK,qBACX,kBAACyI,EAAA,EAAKnD,QAAN,KACE,kBAACmD,EAAA,EAAKG,MAAN,kBAGJ,kBAACH,EAAA,EAAD,CACEC,OAAwB,IAAhBH,EACRI,SAAUJ,EAAc,GAAK5D,EAAgB,EAC7CU,QAAS,kBAAMmD,EAAW,KAE1B,kBAAC/C,EAAA,EAAD,CAAMzF,KAAK,SACX,kBAACyI,EAAA,EAAKnD,QAAN,KACE,kBAACmD,EAAA,EAAKG,MAAN,2BAGJ,kBAACH,EAAA,EAAD,CACEC,OAAwB,IAAhBH,EACRI,SAAUJ,EAAc,GAAK5D,EAAgB,EAC7CU,QAAS,kBAAMmD,EAAW,KAE1B,kBAAC/C,EAAA,EAAD,CAAMzF,KAAK,mBACX,kBAACyI,EAAA,EAAKnD,QAAN,KACE,kBAACmD,EAAA,EAAKG,MAAN,+B,GAjCqBlD,a,SCIdmD,E,kDACnB,WAAYtH,GAAQ,IAAD,8BACjB,cAAMA,IA2BRkD,WAAa,SAACqE,GACZ,EAAKrH,SAAL,eAAmBqH,KA7BF,EAgCnBpE,SAAW,WAAO,IACV6D,EAAgB,EAAKjG,MAArBiG,YAEN,GAAIA,EAAc,GAAKA,GAAe,EACpC,OAAO,EAAK9G,UAAS,gBAAG8G,EAAH,EAAGA,YAAH,MAAsB,CACzCA,cAAeA,OArCF,EA0CnBV,SAAW,WAAO,IACVU,EAAgB,EAAKjG,MAArBiG,YACFQ,EAAeC,OAAOC,QACxB,kDACA,GAGF,GAAIV,EAAc,GAAKA,GAAe,GAAKQ,EACzC,OAAO,EAAKtH,UAAS,gBAAG8G,EAAH,EAAGA,YAAH,MAAsB,CACzCA,cAAeA,OAnDF,EAwDnBC,WAAa,SAACU,GAAY,IAClBvE,EAAkB,EAAKrC,MAAvBqC,cACFoE,EAAeC,OAAOC,QACxB,kDACA,GAEF,GAAIC,GAAUvE,EAAgB,GAAKuE,GAAU,GAAKH,EAChD,OAAO,EAAKtH,SAAS,CAAE8G,YAAaW,KA7DtC,EAAK5G,MAAQ,CACXiG,YAAa,EACb5D,eAAgB,EAEhB9B,SAAU,GACVE,IAAK,GACLD,MAAO,GACPE,cAAe,GACf/B,OAAQ,GACRD,cAAe,GACfqB,gBAAiB,GAEjBsE,UAAW,GACXC,SAAU,GACVC,KAAM,GACNvE,MAAO,GACPyE,QAAS,GACTE,QAAS,GACTD,QAAS,GAETgB,OAAQ,GACRC,QAAS,GACTC,aAAc,IAxBC,E,qDAmET,IAAD,SAsBHpD,KAAKxC,MApBPiG,EAFK,EAELA,YACA5D,EAHK,EAGLA,cACA1D,EAJK,EAILA,OACAD,EALK,EAKLA,cACA6B,EANK,EAMLA,SACAE,EAPK,EAOLA,IACAD,EARK,EAQLA,MACAE,EATK,EASLA,cACA2D,EAVK,EAULA,UACAC,EAXK,EAWLA,SACAC,EAZK,EAYLA,KACAvE,EAbK,EAaLA,MACAwE,EAdK,EAcLA,SACAG,EAfK,EAeLA,QACAF,EAhBK,EAgBLA,QACAC,EAjBK,EAiBLA,QACAgB,EAlBK,EAkBLA,OACAC,EAnBK,EAmBLA,QACAC,EApBK,EAoBLA,aACA7F,EArBK,EAqBLA,gBA8CE8G,EA5CQ,CACV,kBACE,kBAAC,EAAD,CACEzE,SAAU,EAAKA,SACfmD,SAAU,EAAKA,SACfW,WAAY,EAAKA,WACjB/D,WAAY,EAAKA,WACjBxD,OAAQA,EACRoB,gBAAiBA,EACjBrB,cAAeA,EACf6B,SAAUA,EACVE,IAAKA,EACLD,MAAOA,EACPE,cAAeA,KAGnB,kBACE,kBAAC,EAAD,CACE0B,SAAU,EAAKA,SACfmD,SAAU,EAAKA,SACfW,WAAY,EAAKA,WACjB/D,WAAY,EAAKA,WACjBkC,UAAWA,EACXC,SAAUA,EACVC,KAAMA,EACNvE,MAAOA,EACPwE,SAAUA,EACVC,QAASA,EACTC,QAASA,EACTC,QAASA,KAGb,kBACE,kBAAC,EAAD,CACEvC,SAAU,EAAKA,SACfmD,SAAU,EAAKA,SACfW,WAAY,EAAKA,WACjB/D,WAAY,EAAKA,WACjBuD,OAAQA,EACRC,QAASA,EACTC,aAAcA,MAIHK,GACjB,OACE,yBAAKrH,UAAU,aACb,kBAAC,EAAD,CACEqH,YAAaA,EACb5D,cAAeA,EACf6D,WAAY1D,KAAK0D,aAEnB,kBAACY,EAAA,EAAD,CAASlI,UAAU,gBACjB,yBAAKA,UAAU,gBACb,kBAACiI,EAAD,a,GAjJqBzD,a,cCAjC2D,IAASC,OACP,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.7165140c.chunk.js","sourcesContent":["import React from \"react\";\nimport { Form, Input } from \"semantic-ui-react\";\n\nfunction InputBox({\n  name,\n  value,\n  errorMessage,\n  handleInput,\n  label,\n  placeholder,\n  type\n}) { \n  return (\n    <Form.Field\n      type={type || \"text\"}\n      control={Input}\n      label={label}\n      placeholder={placeholder || label}\n      name={name}\n      value={value || \"\"}\n      onChange={handleInput}\n      error={\n        errorMessage\n          ? {\n              content: errorMessage,\n            }\n          : false\n      }\n    />\n  );\n}\n\nexport default InputBox;\n","import React from \"react\";\nimport { Form } from \"semantic-ui-react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nfunction TextArea({\n  name,\n  value,\n  errorMessage,\n  handleInput,\n  label,\n  placeholder,\n}) {\n  return (\n    <Form.Field\n      control={TextareaAutosize}\n      label={label}\n      placeholder={placeholder || label}\n      name={name}\n      value={value || \"\"}\n      onChange={handleInput}\n      error={\n        errorMessage\n          ? {\n              content: errorMessage,\n            }\n          : false\n      }\n    />\n  );\n}\n\nexport default TextArea;\n","import React from 'react'\n\nfunction Avatar({previewAvatar, avatar}) {\n    return (\n        <div className=\"avatar\">\n            <label htmlFor=\"upload_avatar\">\n              <img\n                src={\n                  previewAvatar ||\n                  avatar ||\n                  \"https://img.icons8.com/material-sharp/128/000000/user.png\"\n                }\n                alt=\"avatar\"\n              />\n              <div className=\"upload_icon\">\n                <i className=\"fas fa-upload\"></i>\n                <p>Upload</p>\n              </div>\n            </label>\n          </div>\n    )\n}\n\nexport default Avatar\n","import React, { Component } from \"react\";\nimport { Button, Form, Message, Icon } from \"semantic-ui-react\";\nimport {\n  isUsernameValid,\n  isBioValid,\n  isAvatarValid,\n  isEmailValid,\n  isContactNumberValid,\n} from \"../utils/validateProfileForm\";\nimport InputBox from \"../Components/InputBox\";\nimport TextArea from \"../Components/TextArea\";\nimport Avatar from \"../Components/Avatar\";\n\nexport default class ProfileInfo extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      username: \"\",\n      bio: \"\",\n      email: \"\",\n      contactNumber: \"\",\n      avatar: \"\",\n      previewAvatar: \"\",\n      avatarImageType: \"\",\n\n      usernameValidationFailedMessage: \"\",\n      bioValidationFailedMessage: \"\",\n      emailValidationFailedMessage: \"\",\n      avatarValidationFailedMessage: \"\",\n      contactNumberValidationFailedMessage: \"\",\n    };\n    this.avatarRef = React.createRef();\n  }\n\n  componentDidMount() {\n    let {\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      avatarImageType,\n    } = this.props;\n\n    this.setState({\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      avatarImageType,\n    });\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    this.setState({ [name]: value });\n    return this.removeErrorMessage(name);\n  };\n\n  handleImage = () => {\n    let file = this.avatarRef.current.files[0];\n    let reader = new FileReader();\n    reader.readAsDataURL(file);\n\n    this.removeErrorMessage(\"avatar\");\n    reader.onloadend = () => {\n      this.setState({\n        previewAvatar: [reader.result],\n        avatarImageType: this.avatarRef.current.files[0].type,\n        avatar: file.name,\n      });\n    };\n    return this.removeErrorMessage(\"avatar\");\n  };\n\n  removeErrorMessage = (name) => {\n    let {\n      usernameValidationFailedMessage,\n      bioValidationFailedMessage,\n      emailValidationFailedMessage,\n      avatarValidationFailedMessage,\n      contactNumberValidationFailedMessage,\n    } = this.state;\n\n    switch (name) {\n      case \"email\":\n        return (\n          emailValidationFailedMessage &&\n          this.setState({ emailValidationFailedMessage: \"\" })\n        );\n\n      case \"bio\":\n        return (\n          bioValidationFailedMessage &&\n          this.setState({ bioValidationFailedMessage: \"\" })\n        );\n      case \"username\":\n        return (\n          usernameValidationFailedMessage &&\n          this.setState({ usernameValidationFailedMessage: \"\" })\n        );\n      case \"avatar\":\n        return (\n          avatarValidationFailedMessage &&\n          this.setState({ avatarValidationFailedMessage: \"\" })\n        );\n      case \"contactNumber\":\n        return (\n          contactNumberValidationFailedMessage &&\n          this.setState({ contactNumberValidationFailedMessage: \"\" })\n        );\n      default:\n        return;\n    }\n  };\n\n  validateForm = ({\n    username,\n    email,\n    bio,\n    contactNumber,\n    avatar,\n    avatarImageType,\n  }) => {\n    let usernameValidationFailedMessage = isUsernameValid(username);\n    let bioValidationFailedMessage = isBioValid(bio);\n    let emailValidationFailedMessage = isEmailValid(email);\n    let avatarValidationFailedMessage = isAvatarValid(avatar, avatarImageType);\n    let contactNumberValidationFailedMessage = isContactNumberValid(\n      contactNumber\n    );\n    this.setState({\n      usernameValidationFailedMessage,\n      bioValidationFailedMessage,\n      emailValidationFailedMessage,\n      avatarValidationFailedMessage,\n      contactNumberValidationFailedMessage,\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.persist();\n    let { updateInfo, nextStep } = this.props;\n    let {\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      avatarImageType,\n    } = this.state;\n    await this.validateForm(this.state);\n    if (\n      this.state.usernameValidationFailedMessage ||\n      this.state.bioValidationFailedMessage ||\n      this.state.emailValidationFailedMessage ||\n      this.state.avatarValidationFailedMessage ||\n      this.state.contactNumberValidationFailedMessage\n    ) {\n      return;\n    }\n    updateInfo({\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      avatarImageType,\n      completedStep: 0,\n    });\n    nextStep();\n  };\n\n  render() {\n    let {\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      usernameValidationFailedMessage,\n      bioValidationFailedMessage,\n      emailValidationFailedMessage,\n      avatarValidationFailedMessage,\n      contactNumberValidationFailedMessage,\n    } = this.state;\n    return (\n      <div className=\"form\">\n        <Form>\n          <input\n            type=\"file\"\n            id=\"upload_avatar\"\n            ref={this.avatarRef}\n            onChange={this.handleImage}\n            name=\"avatar\"\n          />\n\n          <Avatar previewAvatar={previewAvatar} avatar={avatar} />\n          <div>\n            {avatarValidationFailedMessage && (\n              <Message negative>\n                <p>{avatarValidationFailedMessage}</p>\n              </Message>\n            )}\n          </div>\n\n          <InputBox\n            name={\"username\"}\n            label={\"Username\"}\n            value={username}\n            handleInput={this.handleInput}\n            errorMessage={usernameValidationFailedMessage}\n          />\n\n          <TextArea\n            name={\"bio\"}\n            label={\"Bio\"}\n            value={bio}\n            handleInput={this.handleInput}\n            errorMessage={bioValidationFailedMessage}\n          />\n\n          <InputBox\n            name={\"email\"}\n            label={\"Email\"}\n            value={email}\n            handleInput={this.handleInput}\n            errorMessage={emailValidationFailedMessage}\n          />\n\n          <InputBox\n            name={\"contactNumber\"}\n            label={\"Contact Number\"}\n            value={contactNumber}\n            handleInput={this.handleInput}\n            errorMessage={contactNumberValidationFailedMessage}\n          />\n\n          <div className=\"btn_wrapper\">\n            <Button animated onClick={this.handleSubmit}>\n              <Button.Content visible>Next</Button.Content>\n              <Button.Content hidden>\n                <Icon name=\"arrow right\" />\n              </Button.Content>\n            </Button>\n          </div>\n        </Form>\n      </div>\n    );\n  }\n}\n","export function isUsernameValid(username = \"\") {\n  username = username.trim();\n  if (!username) {\n    return \"Username is required.\";\n  }\n  let hasNumber = username.split(\"\").some((char) => !isNaN(+char));\n  if (username.length < 6) {\n    return \"Username must be atleast 6 character long.\";\n  } else if (username !== username.toLowerCase()) {\n    return \"Username must be in lowercase\";\n  } else if (hasNumber) {\n    return \"Username should not contain any digit\";\n  } else {\n    return \"\";\n  }\n}\n\nexport function isBioValid(bio = \"\") {\n  bio = bio.trim();\n  if (!bio) return \"Bio is required.\";\n  return bio.length < 150 ? \"Bio must be 150 characters long\" : \"\";\n}\n\nexport function isAvatarValid(avatar = \"\", imageType) {\n  avatar = avatar.trim();\n  if (!avatar) return \"Profile picture is required.\";\n  let isJPEG = imageType.toLowerCase().includes(\"jpeg\");\n  return !isJPEG ? \"Only .jpeg images are supported.\" : \"\";\n}\n\nexport function isEmailValid(email = \"\") {\n  email = email.trim();\n  if(!email) return \"Email is required.\";\n  let isValid =\n    email.length && email.endsWith(\".com\") && email.includes(\"@\");\n  return !isValid ? \"Invalid Email\" : \"\";\n}\n\nexport function isContactNumberValid(contactNumber = \"\") {\n  contactNumber = contactNumber.trim();\n  if(!contactNumber) return \"Contact number is required.\";\n  \n  let startingDigit = contactNumber.trim().slice(0, 1);\n  if (startingDigit > 9 || startingDigit < 6) {\n    return \"Invalid contact number\";\n  }\n  return \"\";\n}\n","export const countryOptions = [\n  { key: \"in\", value: \"India\", text: \"India\" },\n  { key: \"af\", value: \"Afghanistan\", text: \"Afghanistan\" },\n  { key: \"ax\", value: \"Aland Islands\", text: \"Aland Islands\" },\n  { key: \"al\", value: \"Albania\", text: \"Albania\" },\n  { key: \"dz\", value: \"Algeria\", text: \"Algeria\" },\n  { key: \"as\", value: \"American Samoa\", text: \"American Samoa\" },\n  { key: \"ad\", value: \"Andorra\", text: \"Andorra\" },\n  { key: \"ao\", value: \"Angola\", text: \"Angola\" },\n  { key: \"ai\", value: \"Anguilla\", text: \"Anguilla\" },\n  { key: \"ag\", value: \"Antigua\", text: \"Antigua\" },\n  { key: \"ar\", value: \"Argentina\", text: \"Argentina\" },\n  { key: \"am\", value: \"Armenia\", text: \"Armenia\" },\n  { key: \"aw\", value: \"Aruba\", text: \"Aruba\" },\n  { key: \"au\", value: \"Australia\", text: \"Australia\" },\n  { key: \"at\", value: \"Austria\", text: \"Austria\" },\n  { key: \"az\", value: \"Azerbaijan\", text: \"Azerbaijan\" },\n  { key: \"bs\", value: \"Bahamas\", text: \"Bahamas\" },\n  { key: \"bh\", value: \"Bahrain\", text: \"Bahrain\" },\n  { key: \"bd\", value: \"Bangladesh\", text: \"Bangladesh\" },\n  { key: \"bb\", value: \"Barbados\", text: \"Barbados\" },\n  { key: \"by\", value: \"Belarus\", text: \"Belarus\" },\n  { key: \"be\", value: \"Belgium\", text: \"Belgium\" },\n  { key: \"bz\", value: \"Belize\", text: \"Belize\" },\n  { key: \"bj\", value: \"Benin\", text: \"Benin\" },\n];\n","import React from \"react\";\nimport { Form } from \"semantic-ui-react\";\n\nfunction Select({value, errorMessage, options, name, label, handleInput}) {\n  \n  return (\n    <Form.Field\n      label={label}\n      name={name || \"\"}\n      value={value || \"\"}\n      control={\"select\"}\n      onChange={handleInput}\n      error={\n        errorMessage\n          ? { content: errorMessage }\n          : false\n      }\n    >\n      <option key=\"C001\" value=\"\">\n        Select Country\n      </option>\n      {options.map((option) => {\n        return (\n          <option key={option.key} value={option.value}>\n            {option.text}\n          </option>\n        );\n      })}\n    </Form.Field>\n  );\n}\n\nexport default Select;\n","\nexport function isNameValid(name = \"\", fieldName = \"\") {\n  name = name.trim();\n  if (!name) {\n    return `${fieldName.trim()} is required.`;\n  }\n\n  let hasNonCharValue = name.split(\"\").some((char, index) => {\n    let asciiValue = name.toLowerCase().charCodeAt(index);\n    if (asciiValue < 97 || asciiValue > 122 || !isNaN(+char)) {\n      return true;\n    }\n    return false;\n  });\n  if (hasNonCharValue) {\n    return \"Only alphabets are allowed.\";\n  }\n  return \"\";\n}\n\nexport function isZipcodeValid(zipcode = \"\") {\n  zipcode = zipcode.trim();\n  if(!zipcode) return \"Zipcode is required.\";\n  if (zipcode.length !== 6) {\n    return \"Zipcode must be 6 character long.\";\n  }\n\n  let hasNonNumericValue = zipcode.split(\"\").some((digit) => isNaN(+digit));\n\n  if (hasNonNumericValue) {\n    return \"Zipcode sholud contain only numbers.\";\n  }\n  return \"\";\n}\n\nexport function isNonEmpty(value=\"\", fieldName=\"\") {\n    value = value.trim();\n    if(!value) {\n        return `${fieldName.trim()} is required.`\n    }\n    return \"\";\n}","import React, { Component } from \"react\";\nimport { Button, Form, Icon } from \"semantic-ui-react\";\nimport { countryOptions } from \"../utils/data\";\nimport Select from \"../Components/Select\";\n\nimport {\n  isNameValid,\n  isZipcodeValid,\n  isNonEmpty,\n} from \"../utils/validatePersonalInfoForm\";\nimport InputBox from \"../Components/InputBox\";\nimport TextArea from \"../Components/TextArea\";\n\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      firstName: \"\",\n      lastName: \"\",\n      city: \"\",\n      state: \"\",\n      district: \"\",\n      zipcode: \"\",\n      address: \"\",\n      country: \"\",\n      firstNameValidationFailedMessage: \"\",\n      lastNameValidationFailedMessage: \"\",\n      cityNameValidationFailedMessage: \"\",\n      stateNameValidationFailedMessage: \"\",\n      districtNameValidationFailedMessage: \"\",\n      zipcodeValidationFailedMessage: \"\",\n      addressValidationFailedMessage: \"\",\n    };\n  }\n\n  componentDidMount() {\n    let {\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      zipcode,\n      address,\n      country,\n    } = this.props;\n\n    this.setState({\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      zipcode,\n      address,\n      country,\n    });\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    console.log({ name, value });\n    this.setState({ [name]: value });\n    return this.removeErrorMessage(name);\n  };\n\n  validateForm = ({\n    firstName,\n    lastName,\n    city,\n    state,\n    district,\n    zipcode,\n    address,\n    country,\n  }) => {\n    let firstNameValidationFailedMessage = isNameValid(firstName, \"First name\");\n    let lastNameValidationFailedMessage = isNameValid(lastName, \"Last name\");\n    let cityNameValidationFailedMessage = isNonEmpty(city, \"City name\");\n    let stateNameValidationFailedMessage = isNonEmpty(state, \"State name\");\n    let districtNameValidationFailedMessage = isNonEmpty(\n      district,\n      \"District name\"\n    );\n    let zipcodeValidationFailedMessage = isZipcodeValid(zipcode);\n    let addressValidationFailedMessage = isNonEmpty(address, \"Address\");\n    let countryValidationFailedMessage = isNonEmpty(country, \"Country name\");\n\n    this.setState({\n      firstNameValidationFailedMessage,\n      lastNameValidationFailedMessage,\n      cityNameValidationFailedMessage,\n      stateNameValidationFailedMessage,\n      districtNameValidationFailedMessage,\n      zipcodeValidationFailedMessage,\n      addressValidationFailedMessage,\n      countryValidationFailedMessage,\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.persist();\n    let { updateInfo, nextStep } = this.props;\n    let {\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      zipcode,\n      address,\n      country,\n    } = this.state;\n    await this.validateForm(this.state);\n    if (\n      this.state.firstNameValidationFailedMessage ||\n      this.state.lastNameValidationFailedMessage ||\n      this.state.cityNameValidationFailedMessage ||\n      this.state.stateNameValidationFailedMessage ||\n      this.state.districtNameValidationFailedMessage ||\n      this.state.zipcodeValidationFailedMessage ||\n      this.state.addressValidationFailedMessage ||\n      this.state.countryValidationFailedMessage\n    ) {\n      return;\n    }\n    updateInfo({\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      zipcode,\n      address,\n      country,\n      completedStep: 1,\n    });\n    nextStep();\n  };\n\n  removeErrorMessage = (name) => {\n    let {\n      firstNameValidationFailedMessage,\n      lastNameValidationFailedMessage,\n      cityNameValidationFailedMessage,\n      stateNameValidationFailedMessage,\n      districtNameValidationFailedMessage,\n      zipcodeValidationFailedMessage,\n      addressValidationFailedMessage,\n      countryValidationFailedMessage,\n    } = this.state;\n\n    switch (name) {\n      case \"firstName\":\n        return (\n          firstNameValidationFailedMessage &&\n          this.setState({ firstNameValidationFailedMessage: \"\" })\n        );\n\n      case \"lastName\":\n        return (\n          lastNameValidationFailedMessage &&\n          this.setState({ lastNameValidationFailedMessage: \"\" })\n        );\n      case \"city\":\n        return (\n          cityNameValidationFailedMessage &&\n          this.setState({ cityNameValidationFailedMessage: \"\" })\n        );\n      case \"state\":\n        return (\n          stateNameValidationFailedMessage &&\n          this.setState({ stateNameValidationFailedMessage: \"\" })\n        );\n      case \"district\":\n        return (\n          districtNameValidationFailedMessage &&\n          this.setState({ districtNameValidationFailedMessage: \"\" })\n        );\n      case \"zipcode\":\n        return (\n          zipcodeValidationFailedMessage &&\n          this.setState({ zipcodeValidationFailedMessage: \"\" })\n        );\n      case \"address\":\n        return (\n          addressValidationFailedMessage &&\n          this.setState({ addressValidationFailedMessage: \"\" })\n        );\n\n      case \"country\":\n        return (\n          countryValidationFailedMessage &&\n          this.setState({ countryValidationFailedMessage: \"\" })\n        );\n\n      default:\n        return;\n    }\n  };\n\n  render() {\n    let { prevStep } = this.props;\n    let {\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      zipcode,\n      address,\n      country,\n      firstNameValidationFailedMessage,\n      lastNameValidationFailedMessage,\n      cityNameValidationFailedMessage,\n      stateNameValidationFailedMessage,\n      districtNameValidationFailedMessage,\n      zipcodeValidationFailedMessage,\n      addressValidationFailedMessage,\n      countryValidationFailedMessage,\n    } = this.state;\n    return (\n      <Form>\n        <Form.Group widths=\"equal\">\n          <InputBox\n            name={\"firstName\"}\n            label={\"First name\"}\n            value={firstName}\n            handleInput={this.handleInput}\n            errorMessage={firstNameValidationFailedMessage}\n          />\n          <InputBox\n            name={\"lastName\"}\n            label={\"Last name\"}\n            value={lastName}\n            handleInput={this.handleInput}\n            errorMessage={lastNameValidationFailedMessage}\n          />\n        </Form.Group>\n        <InputBox\n          name={\"city\"}\n          label={\"City\"}\n          value={city}\n          handleInput={this.handleInput}\n          errorMessage={cityNameValidationFailedMessage}\n        />\n        <InputBox\n          name={\"district\"}\n          label={\"District\"}\n          value={district}\n          handleInput={this.handleInput}\n          errorMessage={districtNameValidationFailedMessage}\n        />\n        <InputBox\n          name={\"state\"}\n          label={\"State\"}\n          value={state}\n          handleInput={this.handleInput}\n          errorMessage={stateNameValidationFailedMessage}\n        />\n        <InputBox\n          name={\"zipcode\"}\n          label=\"Zipcode\"\n          value={zipcode}\n          handleInput={this.handleInput}\n          errorMessage={zipcodeValidationFailedMessage}\n        />\n\n        <Select\n          label=\"Country\"\n          name=\"country\"\n          value={country}\n          errorMessage={countryValidationFailedMessage}\n          handleInput={this.handleInput}\n          options={countryOptions}\n        />\n\n        <TextArea\n          name={\"address\"}\n          label={\"Address\"}\n          value={address}\n          handleInput={this.handleInput}\n          errorMessage={addressValidationFailedMessage}\n        />\n        <div className=\"btn_wrapper\">\n          <Button animated onClick={prevStep}>\n            <Button.Content visible>Back</Button.Content>\n            <Button.Content hidden>\n              <Icon name=\"arrow left\" />\n            </Button.Content>\n          </Button>\n          <Button animated onClick={this.handleSubmit}>\n            <Button.Content visible>Next</Button.Content>\n            <Button.Content hidden>\n              <Icon name=\"arrow right\" />\n            </Button.Content>\n          </Button>\n        </div>\n      </Form>\n    );\n  }\n}\n","export function isNonEmpty(value=\"\", fieldName=\"\") {\n    value = value.trim();\n    if(!value) {\n        return `${fieldName.trim()} is required.`\n    }\n    return \"\";\n}","import React, { Component } from \"react\";\nimport { Button, Form, Input, Icon } from \"semantic-ui-react\";\nimport { isNonEmpty } from \"../utils/validateQualificationForm\";\n\nexport default class index extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      school: \"\",\n      college: \"\",\n      postGraduate: \"\",\n\n      schoolNameValidationFailedMessage: \"\",\n      collegeNameValidationFailedMessage: \"\",\n      postGraduateValidationFailedMessage: \"\",\n    };\n  }\n\n  componentDidMount() {\n    let { school, college, postGraduate } = this.props;\n    return this.setState({ school, college, postGraduate })\n  }\n\n  handleInput = ({ target: { name, value } }) => {\n    return this.setState({ [name]: value });\n  };\n\n  validateForm = ({ school, college, postGraduate }) => {\n    let schoolNameValidationFailedMessage = isNonEmpty(school, \"School name\");\n    let collegeNameValidationFailedMessage = isNonEmpty(\n      college,\n      \"College name\"\n    );\n    let postGraduateValidationFailedMessage = isNonEmpty(\n      postGraduate,\n      \"University name\"\n    );\n\n    return this.setState({\n      schoolNameValidationFailedMessage,\n      collegeNameValidationFailedMessage,\n      postGraduateValidationFailedMessage,\n    });\n  };\n\n  handleSubmit = async (event) => {\n    event.persist();\n    let { updateInfo } = this.props;\n    let { school, college, postGraduate } = this.state;\n    await this.validateForm(this.state);\n    if (\n      this.state.schoolNameValidationFailedMessage ||\n      this.state.collegeNameValidationFailedMessage ||\n      this.state.postGraduateValidationFailedMessage\n    ) {\n      return;\n    }\n\n    updateInfo({\n      school,\n      college,\n      postGraduate,\n      completedStep:2,\n    });\n  };\n\n  render() {\n    let { prevStep } = this.props;\n    let {\n      school,\n      college,\n      postGraduate,\n      schoolNameValidationFailedMessage,\n      collegeNameValidationFailedMessage,\n      postGraduateValidationFailedMessage,\n    } = this.state;\n    return (\n      <div>\n        <Form>\n          <Form.Field\n            placeholder=\"School\"\n            control={Input}\n            label=\"School\"\n            name=\"school\"\n            value={school}\n            onChange={this.handleInput}\n            error={\n              schoolNameValidationFailedMessage\n                ? { content: schoolNameValidationFailedMessage }\n                : false\n            }\n          />\n\n          <Form.Field\n            control={Input}\n            label=\"College\"\n            placeholder=\"College\"\n            name=\"college\"\n            value={college}\n            onChange={this.handleInput}\n            error={\n              collegeNameValidationFailedMessage\n                ? { content: collegeNameValidationFailedMessage }\n                : false\n            }\n          />\n\n          <Form.Field\n            control={Input}\n            label=\"Post-Graduate\"\n            placeholder=\"Post-Graduate\"\n            name=\"postGraduate\"\n            value={postGraduate}\n            onChange={this.handleInput}\n            error={\n              postGraduateValidationFailedMessage\n                ? { content: postGraduateValidationFailedMessage }\n                : false\n            }\n          />\n          <div className=\"btn_wrapper\">\n          <Button animated onClick={prevStep}>\n            <Button.Content visible>Back</Button.Content>\n            <Button.Content hidden>\n              <Icon name=\"arrow left\" />\n            </Button.Content>\n          </Button>\n          <Button animated onClick={this.handleSubmit}>\n            <Button.Content visible>Next</Button.Content>\n            <Button.Content hidden>\n              <Icon name=\"arrow right\" />\n            </Button.Content>\n          </Button>\n        </div>\n        </Form>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Icon, Step } from \"semantic-ui-react\";\n\nexport default class Steps extends Component {\n  render() {\n    let { currentStep, completedStep, jumpToStep } = this.props;\n    return (\n      <div className=\"steps_wrapper\">\n        <Step.Group widths={3}>\n          <Step\n            active={currentStep === 0}\n            disabled={false}\n            onClick={() => jumpToStep(0)}\n          >\n            <Icon name=\"id badge outline\" />\n            <Step.Content>\n              <Step.Title>Profile</Step.Title>\n            </Step.Content>\n          </Step>\n          <Step\n            active={currentStep === 1}\n            disabled={currentStep < 1 && completedStep < 0}\n            onClick={() => jumpToStep(1)}\n          >\n            <Icon name=\"user\" />\n            <Step.Content>\n              <Step.Title>Personal Details</Step.Title>\n            </Step.Content>\n          </Step>\n          <Step\n            active={currentStep === 2}\n            disabled={currentStep < 2 && completedStep < 1}\n            onClick={() => jumpToStep(2)}\n          >\n            <Icon name=\"graduation cap\" />\n            <Step.Content>\n              <Step.Title>Qualifications</Step.Title>\n            </Step.Content>\n          </Step>\n        </Step.Group>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport ProfileInfo from \"./ProfileInfo\";\nimport PersonalInfo from \"./PersonalInfo\";\nimport Qualification from \"./Qualification\";\nimport Steps from \"./Components/Steps\";\nimport { Segment } from \"semantic-ui-react\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentStep: 0,\n      completedStep: -1,\n\n      username: \"\",\n      bio: \"\",\n      email: \"\",\n      contactNumber: \"\",\n      avatar: \"\",\n      previewAvatar: \"\",\n      avatarImageType: \"\",\n\n      firstName: \"\",\n      lastName: \"\",\n      city: \"\",\n      state: \"\",\n      zipcode: \"\",\n      country: \"\",\n      address: \"\",\n\n      school: \"\",\n      college: \"\",\n      postGraduate: \"\",\n    };\n  }\n\n  updateInfo = (updatedValueObj) => {\n    this.setState({ ...updatedValueObj });\n  };\n\n  nextStep = () => {\n    let { currentStep } = this.state;\n\n    if (currentStep < 2 && currentStep >= 0) {\n      return this.setState(({ currentStep }) => ({\n        currentStep: ++currentStep,\n      }));\n    }\n  };\n\n  prevStep = () => {\n    let { currentStep } = this.state;\n    let userResponse = window.confirm(\n      \"Do you really want to go to the previous step?\",\n      false\n    );\n\n    if (currentStep < 3 && currentStep >= 1 && userResponse) {\n      return this.setState(({ currentStep }) => ({\n        currentStep: --currentStep,\n      }));\n    }\n  };\n\n  jumpToStep = (stepNo) => {\n    let { completedStep } = this.state;\n    let userResponse = window.confirm(\n      \"Do you really want to go to the previous step?\",\n      false\n    );\n    if (stepNo <= completedStep + 1 && stepNo >= 0 && userResponse) {\n      return this.setState({ currentStep: stepNo });\n    }\n  };\n\n  render() {\n    let {\n      currentStep,\n      completedStep,\n      avatar,\n      previewAvatar,\n      username,\n      bio,\n      email,\n      contactNumber,\n      firstName,\n      lastName,\n      city,\n      state,\n      district,\n      country,\n      zipcode,\n      address,\n      school,\n      college,\n      postGraduate,\n      avatarImageType,\n    } = this.state;\n    let forms = [\n      () => (\n        <ProfileInfo\n          nextStep={this.nextStep}\n          prevStep={this.prevStep}\n          jumpToStep={this.jumpToStep}\n          updateInfo={this.updateInfo}\n          avatar={avatar}\n          avatarImageType={avatarImageType}\n          previewAvatar={previewAvatar}\n          username={username}\n          bio={bio}\n          email={email}\n          contactNumber={contactNumber}\n        />\n      ),\n      () => (\n        <PersonalInfo\n          nextStep={this.nextStep}\n          prevStep={this.prevStep}\n          jumpToStep={this.jumpToStep}\n          updateInfo={this.updateInfo}\n          firstName={firstName}\n          lastName={lastName}\n          city={city}\n          state={state}\n          district={district}\n          zipcode={zipcode}\n          address={address}\n          country={country}\n        />\n      ),\n      () => (\n        <Qualification\n          nextStep={this.nextStep}\n          prevStep={this.prevStep}\n          jumpToStep={this.jumpToStep}\n          updateInfo={this.updateInfo}\n          school={school}\n          college={college}\n          postGraduate={postGraduate}\n        />\n      ),\n    ];\n    let Form = forms[currentStep];\n    return (\n      <div className=\"container\">\n        <Steps\n          currentStep={currentStep}\n          completedStep={completedStep}\n          jumpToStep={this.jumpToStep}\n        />\n        <Segment className=\"form_segment\">\n          <div className=\"form_wrapper\">\n            <Form />\n          </div>\n        </Segment>\n      </div>\n    );\n  }\n}\n","import ReactDOM from \"react-dom\";\nimport React from \"react\";\nimport App from \"./App\";\nimport \"./assets/stylesheets/index.scss\";\nimport 'semantic-ui-css/semantic.min.css';\n\n\nReactDOM.render(\n  <React.Fragment>\n    <App />\n  </React.Fragment>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}